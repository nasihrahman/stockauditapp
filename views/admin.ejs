<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Stock Audit</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f6fffd; /* Updated background color */
      color: #1e293b;
      line-height: 1.6;
    }

    .info-panel {
      background: #1e293b;
      color: white;
      padding: 2rem;
      margin-bottom: 2rem;

      display: flex;
      align-items: center;
      gap: 1rem;
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    .edit-cat{
      background: #667eea;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: normal;
      cursor: pointer;
      transition: all 0.2s ease;
      font-family: "Raleway", sans-serif;
    }
    .logo {
      width: 60px;
      height: 60px;
      border-radius: 12px;
      background: rgba(255,255,255,0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
    }

    .company-info h1 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      font-weight: 700;
    }

    .company-info p {
      opacity: 0.9;
      font-size: 1.1rem;
    }

    main {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 2rem;
    }
    ul{
      padding-left: 1rem!important;
    }
    .admin-section {
      background: white;
      border-radius: 9px; /* Changed from 16px to 9px */
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* Updated box-shadow */
      border: 1.666px solid #171e29; /* Updated border */
    }

    .section-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border:none;
      /* border-bottom: 2px solid #f1f5f9; */
    }

    .section-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1e293b;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .category-selector {
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 2rem;
    }

    .category-selector h3 {
      margin-bottom: 1rem;
      color: #475569;
      font-size: 1.1rem;
    }

    .category-tabs {
      display: flex;
      flex-wrap: nowrap;
      overflow-x: auto;
      scroll-behavior: smooth;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .category-tab {
      font-weight: 500;
      color: #64748b;
      /* Removed visual styling, now handled by .category-tab-wrapper */
    }

    .category-tab:hover {
      border-color: #667eea;
      background: #f8fafc;
    }

    

    .category-tab-wrapper {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 10px; /* Add some space between the tab and the button */
      padding: 0.75rem 1rem; /* Match category-tab padding for consistent height */
      border: 2px solid #e2e8f0; /* Match category-tab border */
      border-radius: 8px; /* Match category-tab border-radius */
      margin-right: 0.5rem; /* Match category-tabs gap */
      background: white; /* Match category-tab background */
      cursor: pointer; /* Indicate it's clickable */
      transition: all 0.2s ease; /* Smooth transitions */
    }

    .category-tab-wrapper:hover {
      border-color: #667eea;
      background: #f8fafc;
    }

    .category-tab-wrapper.active .category-tab {
      background: none; /* Remove background from inner tab when wrapper is active */
      color: inherit; /* Inherit color from wrapper */
    }

    .category-tab-wrapper.active {
      background: #667eea;
      border-color: #667eea;
      color: white;
      font-weight: 600;
    }

    .selected-category {
      background: #ecfdf5;
      border: 2px solid #22c55e;
      border-radius: 8px;
      padding: 1rem;
      margin-top: 1rem;
      display: none;
    }

    .selected-category.show {
      display: block;
    }

    .selected-category-text {
      color: #166534;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-row {
      display: flex;
      gap: 1rem;
      align-items: end;
    }

    .form-control {
      flex: 1;
      border: none !important;;

    }

    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 600;
      color: #374151;
    }

        input[type="text"], select, textarea {
      width: 100%;
      padding: 0.875rem 1rem; /* Reverted to original padding for better visual */
      border: 1px solid #e2e8f0; /* Subtle border */
      border-radius: 8px; /* Rounded corners */
      font-size: 1rem;
      transition: all 0.2s ease; /* Reverted to original transition */
      font-family: inherit;
      background: white; /* Solid background for the input field */
    }

    input[type="text"]:focus, select:focus, textarea:focus {
      outline: none;
      border-color: rgb(23, 40, 50);
      box-shadow: none; /* Remove existing box-shadow */
    }



    .btn-danger {
      background: #F55D3E;
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
    }
    .button {
  cursor: pointer;
  font-weight: 500;
  padding: 10px 20px;
  background-color: rgb(255, 99, 99);
  border: 2px solid rgb(0, 0, 0);
  color: White;
  font-size: 10px;
  text-align: center;
  text-transform: uppercase;
  transition: all ease 0.3s;
  border-radius: 7px;
  /* box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset; */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Reduced box-shadow */
}

.button:hover {
  border-radius: 3px;
  background-color: rgb(255, 68, 68);
}

.button:active {
  /* content: ""; */
  background-color: rgb(255, 38, 38);
  box-shadow:
    rgba(9, 30, 66, 0.25) 0px 1px 1px,
    rgba(9, 30, 66, 0.13) 0px 0px 1px 1px;
}
    .btn-danger:hover {
      box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3); /* Red shadow */
    }

    .question-item.dragging {
      opacity: 0.5;
      background: #c8ebf8;
    }

    .questions-list {
      list-style: none;
    }

    .question-item {
      background: #f8fafc;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 1rem; /* Reverted padding */
      margin-bottom: 0.75rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.2s ease;
    }

    .question-item:hover {
      background: #f1f5f9;
      border-color: #cbd5e1;
    }

    .question-text {
      flex: 1;
      font-weight: 500;
      color: #1e293b;
    }

    .question-category {
      background: #dbeafe;
      color: #1d4ed8;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.875rem;
      font-weight: 500;
      margin: 0 1rem;
    }

    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 0.5rem;
    }

    .status-active {
      background: #22c55e;
    }

    .empty-state {
      text-align: center;
      padding: 3rem;
      color: #64748b;
    }

    .empty-state h3 {
      margin-bottom: 0.5rem;
      color: #374151;
    }

    .new-category-input {
      margin-top: 1rem;
      padding: 1rem;
      background: #fef3c7;
      border: 2px solid #f59e0b;
      border-radius: 8px;
    }

    .new-category-input label {
      color: #92400e;
      margin-bottom: 0.5rem;
    }

    .new-category-input input {
      border-color: #f59e0b;
    }

    .new-category-input input:focus {
      border-color: #d97706;
      box-shadow: 0 0 0 4px rgba(245, 158, 11, 0.1);
    }
    .category-filter-btn {
      padding: 0.5rem 1rem;
      background: #e2e8f0;
      border: none;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      color: #1e293b;
      transition: background 0.3s, color 0.3s;
    }
.btn-delete-cat {
    background-color: #f44336; /* Red background, can be adjusted */
    color: white !important; /* White 'x' */
    border: .7px solid #253031;
    border-radius: 5px; /* Makes it round */
    width: 25px; /* Adjust size as needed */
    height: 25px; /* Adjust size as needed */
    font-size: 16px; /* Size of the 'x' */
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 0; /* Spacing handled by parent flex container */
    transition: box-shadow 0.2s ease; /* Added transition */
}
.btn-delete-cat:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); /* Subtle box-shadow on hover */
}
    .category-filter-btn:hover {
      background: #cbd5e1;
    }

    .category-filter-btn.active-filter {
      background: #667eea;
      color: white;
    }

    @media (max-width: 768px) {
      .form-row {
        flex-direction: column;
        gap: 0.5rem;
        align-items: stretch;
      }

      .category-tabs {
        gap: 0.25rem;
      }

      .category-tab {
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
      }

      .question-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.75rem;
      }

      .question-category {
        margin: 0;
      }
    }
    .header-actions {
      margin-left: auto;
    }

    .home-btn {
      text-decoration: none;
      font-size: 1.5rem;
      background: white;
      border-radius: 8px;
      padding: 0.25rem 0.75rem;
      color: #1e293b;
      font-weight: bold;
      border: 2px solid #e2e8f0;
      transition: background 0.3s;
    }

    .home-btn:hover {
      background: #e2e8f0;
    }
    .view-audit-btn {
      background: #10b981;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      text-decoration: none;
    }
    .header-btn {
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 0.5rem;
      font-weight: 600;
      border: 1px solid rgba(255,255,255,0.2);
      cursor: pointer;
      text-decoration: none;
      transition: background 0.2s ease;
    }

    .header-btn:hover {
      background-color: rgba(255, 255, 255, 0.2);
    }

/* CSS for button-8 from dashstyle.css */
.button-8 {
  background-color: #e1ecf4;
  border-radius: 3px;
  border: 1px solid #7aa7c7;
  box-shadow: rgba(255, 255, 255, .7) 0 1px 0 0 inset;
  box-sizing: border-box;
  color: #39739d;
  cursor: pointer;
  display: inline-block;
  font-family: -apple-system,system-ui,"Segoe UI","Liberation Sans",sans-serif;
  font-size: 13px;
  font-weight: 400;
  line-height: 1.15385;
  margin: 0;
  outline: none;
  padding: 8px .8em;
  position: relative;
  text-align: center;
  text-decoration: none;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  vertical-align: baseline;
  white-space: nowrap;
}

.button-8:hover,
.button-8:focus {
  background-color: #b3d3ea;
  color: #2c5777;
}

.button-8:focus {
  box-shadow: 0 0 0 4px rgba(0, 149, 255, .15);
}

.button-8:active {
  background-color: #a0c7e4;
  box-shadow: none;
  color: #2c5777;
}

  .button-59 {
  align-items: center;
  background-color: #fff;
  border: 1px solid #000;
  box-sizing: border-box;
  color: #000;
  cursor: pointer;
  display: inline-flex;
  fill: #000;
  font-family: Inter,sans-serif;
  font-size: 16px;
  font-weight: 600;
  height: 48px;
  justify-content: center;
  letter-spacing: -.8px;
  line-height: 24px;
  min-width: 140px;
  outline: 0;
  padding: 0 17px;
  text-align: center;
  text-decoration: none;
  transition: all .3s;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
}

.button-59:focus {
  color: #171e29;
}

.button-59:hover {
  border-color: #06f;
  color: #06f;
  fill: #06f;
}

.button-59:active {
  border-color: #06f;
  color: #06f;
  fill: #06f;
}

@media (min-width: 768px) {
  .button-59 {
    min-width: 170px;
  }
}
.btn-edit-qsn{
  background-color: #38bdf8 !important;
  text-decoration: none;
  font-weight: 500;
}
header{
  background-color: #253031;
  margin-bottom: 2rem;
}
  </style>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
  <header class=" text-white p-2 py-3 sticky-top shadow-sm z-3">
  <div class="container-fluid">
    <nav class="navbar navbar-expand-lg navbar-dark p-0">
      <!-- Left: Title -->
      <div class="d-flex align-items-center">
        <div class="d-sm-block px-3">
          <h5 class="mb-0 fw-bold">Edit Forms</h5>
        </div>
      </div>

      <!-- Spacer -->
      <div class="flex-grow-1"></div>

      <!-- Mobile Menu -->
      <div class="d-lg-none d-flex align-items-center gap-2 ms-auto">
        <!-- Hamburger Button -->
        <button class="navbar-toggler border-0" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMenu">
          <span class="navbar-toggler-icon"></span>
        </button>
      </div>

      <!-- Collapsible Menu -->
      <div class="collapse navbar-collapse " id="navbarMenu">
        <ul class="navbar-nav ms-auto d-flex align-items-center gap-2" id="navButtonGroup">
          <!-- Buttons -->
          <li class="nav-item">
            <a href="/" class="text-white text-decoration-underline small fw-semibold border-0 bg-transparent">Dashboard</a>
          </li>
          <li class="nav-item">
            <a href="/audit/<%= company._id %>" class="text-white text-decoration-underline small fw-semibold border-0 bg-transparent">View Audit</a>
          </li>
          <% if (role === 'admin') { %>
          <li class="nav-item">
            <a href="/admin/add-user" class="text-white text-decoration-underline small fw-semibold border-0 bg-transparent">Add User</a>
          </li>
          <% } %>
          <li class="nav-item">
            <a href="/auth/login" class="text-white text-decoration-underline small fw-semibold border-0 bg-transparent">Logout</a>
          </li>
        </ul>
      </div>
    </nav>
  </div>
</header>
  
  <% if (role === 'admin') { %>
  <main>
    <!-- Edit Company Name Section -->
    <div class="admin-section">
      <div class="section-header ">
        <h2 class="section-title">
          Edit Form Name
        </h2>
      </div>
      <div class="form-row">
        <!-- <div class="form-control"> -->
          <input type="text" id="companyAdminNameEdit" value="<%= company.name %>" />
        <!-- </div> -->
        <button type="button" id="saveCompanyAdminName" class="button-59">Save</button>
      </div>
    </div>

    <!-- Add Category Section -->
    <div class="admin-section mt-10">
      <div class="section-header">
        <h2 class="section-title">
          <!-- <span>📁</span> -->
          Add Category
        </h2>
        <button class="button-8" onclick="window.location.href='/admin/edit-category?company=<%= company._id %>'">Edit Categories</button>

      </div>
      
      <form method="POST" action="/admin/category">
        <input type="hidden" name="companyId" value="<%= company._id %>" />  <!-- ✅ Add this -->
        <div class="form-row">
          <!-- <div class="form-control"> -->
            <!-- <label for="category-name">Category Name</label> -->
            <input type="text" id="category-name" name="name" placeholder="Enter category name..." required />
          <!-- </div> -->
          <button type="submit" class="button-59">Add Category</button>
        </div>
      </form>
    </div>

    <!-- Category Selection & Add Question Section -->
    <div class="admin-section">
      <div class="section-header">
        <h2 class="section-title">
          <!-- <span>❓</span> -->
          Add Questions
        </h2>
      </div>
      
      <!-- Category Selector -->
      <div class="category-selector">
        <h3>Select Active Category</h3>
        <% if (categories && categories.length > 0) { %>
          <div class="category-tabs" id="categoryTabContainer">
  <% categories.forEach(function(cat) { %>
    <div class="category-tab-wrapper" draggable="true" data-id="<%= cat._id %>">
      <div class="category-tab" data-category-id="<%= cat._id %>" data-category-name="<%= cat.name %>">
        <span class="status-indicator status-active"></span>
        <%= cat.name %>
      </div>
      <button class="btn-danger btn-delete-cat" data-id="<%= cat._id %>">X</button>
    </div>
  <% }); %>
</div>  

        <% } else { %>
          <div class="empty-state">
            <h3>No Categories Available</h3>
            <p>Please add a category first before creating questions.</p>
          </div>
        <% } %>
        
        <div class="selected-category" id="selected-category">
          <div class="selected-category-text">
            <span>✅</span>
            <span>Adding questions to: <strong id="selected-category-name"></strong></span>
          </div>
        </div>
      </div>
      
      <!-- Question Form -->
      <form method="POST" action="/admin/question" id="question-form">
         <input type="hidden" name="companyId" value="<%= company._id %>" />  <!-- ✅ Add this -->
        <div class="form-group">
          <label for="single-question-text">Add Single Question</label>
          <textarea id="single-question-text" name="single_text" placeholder="Enter your question..." rows="1"></textarea>
        </div>
        <div class="form-group">
          <label for="question-text">Add Multiple Questions (Comma Separated)</label>
          <textarea id="question-text" name="text" placeholder="Enter your questions, separated by commas..." rows="3"></textarea>
        </div>
        
        <div class="form-group">
          <label for="category-select">Select Category</label>
          <select id="category-select" name="category" required>
            <option value="">Choose a category...</option>
            <% if (categories && categories.length > 0) { %>
              <% categories.forEach(function(cat) { %>
                <option value="<%= cat._id %>"><%= cat.name %></option>
              <% }); %>
            <% } %>
          </select>
        </div>
        
        <div class="new-category-input" style = "display:none">
          <label for="new-category">Or Add New Category</label>
          <input type="text" id="new-category" name="newCategory" placeholder="Enter new category name..." />
        </div>
        
        <button type="submit" id="add-question-btn" class="button-59">
          Add Question
        </button>
      </form>
    </div>

    <!-- Questions List -->
    <div class="admin-section">
      <div class="section-header">
  <h2 class="section-title">
    <!-- <span>📝</span> -->
    All Questions (<%= questions ? questions.length : 0 %>)
  </h2>
</div>

<div style="margin-bottom: 1rem; display: flex; flex-wrap: wrap; gap: 0.5rem;">
  <% categories.forEach(function(cat) { %>
    <button class="category-filter-btn" data-category-id="<%= cat._id %>">
      <%= cat.name %>
    </button>
  <% }) %>
  <button class="category-filter-btn" active-filter data-category-id="all">
    Show All
  </button>
</div>

      
      <% if (questions && questions.length > 0) { %>
        <ul class="questions-list">
          <% questions.forEach(function(q) { %>
<li class="question-item" 
    draggable="true" 
    data-category-id="<%= q.category ? q.category._id : 'none' %>" 
    data-question-id="<%= q._id %>">
              <span class="question-text"><%= q.text %></span>

<span class="question-category">
  <%= q.category ? q.category.name : 'No Category' %>
</span>

<div style="display:flex; gap: 0.5rem;">
  <a href="/admin/edit-question/<%= q._id %>" class="button btn-edit-qsn">Edit</a>

  <form method="POST" action="/admin/question/delete/<%= q._id %>">
    <button type="submit" class="btn-danger button btn-delete-qsn" onclick="return confirm('Are you sure you want to delete this question?')">Delete</button>
  </form>
</div>

            </li>
          <% }); %>
        </ul>
      <% } else { %>
        <div class="empty-state">
          <h3>No Questions Yet</h3>
          <p>Start by adding some questions to your categories.</p>
        </div>
      <% } %>
    </div>
  </main>
  <% } else { %>
  <div style="display: flex; justify-content: center; align-items: center; height: 100vh; text-align: center;">
  <p>Access Denied: You do not have permission to view this page.</p>
</div>
  <% } %>

  <script>
    // Category selection functionality
    const categoryTabs = document.querySelectorAll('.category-tab');
    const selectedCategoryDiv = document.getElementById('selected-category');
    const selectedCategoryNameSpan = document.getElementById('selected-category-name');
    const categorySelect = document.getElementById('category-select');
    const addQuestionBtn = document.getElementById('add-question-btn');
    const questionForm = document.getElementById('question-form');
    const questionTextInput = document.getElementById('question-text');
    const newCategoryInput = document.getElementById('new-category');
    const tabList = document.getElementById('categoryTabContainer');
    let draggedTab = null;

    document.querySelectorAll('.category-tab-wrapper').forEach(tab => {
  tab.addEventListener('dragstart', e => {
    draggedTab = tab;
    tab.classList.add('dragging');
    tab.style.opacity = '0.5';
  });

  tab.addEventListener('dragend', e => {
    tab.classList.remove('dragging');
    tab.style.opacity = '1';
    draggedTab = null;

    // Optional: send reordered list to server
    const orderedIds = [...tabList.querySelectorAll('.category-tab-wrapper')].map(el => el.dataset.id);
    fetch('/admin/category/reorder', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ order: orderedIds })
    }).then(res => res.json())
      .then(data => {
        if (!data.success) alert('Failed to update category order.');
      });
  });

  tab.addEventListener('dragover', e => {
    e.preventDefault();
    const afterElement = getDragAfterElement(tabList, e.clientX);
    if (afterElement == null) {
      tabList.appendChild(draggedTab);
    } else {
      tabList.insertBefore(draggedTab, afterElement);
    }
  });
});

function getDragAfterElement(container, x) {
  const draggableElements = [...container.querySelectorAll('.category-tab-wrapper:not(.dragging)')];

  return draggableElements.reduce((closest, child) => {
    const box = child.getBoundingClientRect();
    const offset = x - (box.left + box.width / 2);
    if (offset < 0 && offset > closest.offset) {
      return { offset, element: child };
    } else {
      return closest;
    }
  }, { offset: Number.NEGATIVE_INFINITY }).element;
}
    // Category tab click handlers
    categoryTabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const categoryId = this.dataset.categoryId;
        const categoryName = this.dataset.categoryName;
        
        // Update visual selection
        document.querySelectorAll('.category-tab-wrapper').forEach(wrapper => wrapper.classList.remove('active')); // Remove from all wrappers
        this.closest('.category-tab-wrapper').classList.add('active'); // Add to the clicked wrapper
        
        // Update form
        categorySelect.value = categoryId;
        selectedCategoryDiv.classList.add('show');
        selectedCategoryNameSpan.textContent = categoryName;
        
        // Focus on question input
        setTimeout(() => {
          questionTextInput.focus();
        }, 200);
      });
    });
    
    // Category select dropdown handler
    categorySelect.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      if (selectedOption.value) {
        const categoryName = selectedOption.text;
        selectedCategoryDiv.classList.add('show');
        selectedCategoryNameSpan.textContent = categoryName;
        
        // Highlight corresponding tab
        categoryTabs.forEach(tab => {
          tab.classList.remove('active');
          if (tab.dataset.categoryId === selectedOption.value) {
            tab.classList.add('active');
          }
        });
      } else {
        selectedCategoryDiv.classList.remove('show');
        categoryTabs.forEach(t => t.classList.remove('active'));
      }
    });
    
    // New category input handler
    newCategoryInput.addEventListener('input', function() {
      const hasValue = !!this.value.trim();
      categorySelect.disabled = hasValue;
      
      if (hasValue) {
        // Clear category selection when typing new category
        categorySelect.value = '';
        selectedCategoryDiv.classList.remove('show');
        categoryTabs.forEach(t => t.classList.remove('active'));
      }
    });
    
    // Re-enable category select when new category is cleared
    newCategoryInput.addEventListener('blur', function() {
      if (!this.value.trim()) {
        categorySelect.disabled = false;
      }
    });
    
    // Form submission handler
    questionForm.addEventListener('submit', function(e) {
      const hasSelectedCategory = categorySelect.value;
      const hasNewCategory = newCategoryInput.value.trim();
      
      if (!hasSelectedCategory && !hasNewCategory) {
        e.preventDefault();
        alert('Please select a category or enter a new category name!');
        return;
      }
    });
    
    // Keyboard shortcut: Ctrl+Enter to submit form
    questionTextInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && e.ctrlKey) {
        questionForm.submit();
      }
    });
    
    // Auto-clear form after successful submission (if page doesn't redirect)
    window.addEventListener('load', function() {
      // This would typically be handled by server-side redirect
      // but can be useful for AJAX submissions
      const selected = 'all'
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('success')) {
        questionTextInput.value = '';
        newCategoryInput.value = '';
        categorySelect.value = '';
        categorySelect.disabled = false;
        selectedCategoryDiv.classList.remove('show');
        categoryTabs.forEach(t => t.classList.remove('active'));
      }
    });
   
  // Existing code...

  // Delete category with confirmation
  const deleteButtons = document.querySelectorAll('.btn-delete-cat');
  deleteButtons.forEach(button => {
    button.addEventListener('click', async function () {
      const catId = this.dataset.id;
      const confirmed = confirm('Are you sure you want to delete this category and all its questions?');
      if (!confirmed) return;

      try {
        const res = await fetch(`/admin/category/${catId}`, {
          method: 'DELETE'
        });
        const data = await res.json();
        if (data.success) {
          alert('Category deleted successfully.');
          window.location.reload();
        } else {
          alert(data.message || 'Failed to delete category.');
        }
      } catch (err) {
        console.error(err);
        alert('An error occurred while deleting the category.');
      }
    });
  });
// Filter questions by category
// document.querySelectorAll('.category-filter-btn').forEach(btn => {
//   btn.addEventListener('click', () => {
//     const selected = btn.getAttribute('data-category-id');
//     document.querySelectorAll('.question-item').forEach(item => {
//       const itemCat = item.getAttribute('data-category-id');
//       if (selected === 'all' || selected === itemCat) {
//         item.style.display = 'flex';
//       } else {
//         item.style.display = 'none';
//       }
//     });
//   });
// });
document.querySelectorAll('.category-filter-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const selected = btn.getAttribute('data-category-id');

    // Apply filtering
    document.querySelectorAll('.question-item').forEach(item => {
      const itemCat = item.getAttribute('data-category-id');
      if (selected === 'all' || selected === itemCat) {
        item.style.display = 'flex';
      } else {
        item.style.display = 'none';
      }
    });

    // Update active styles
    document.querySelectorAll('.category-filter-btn').forEach(b => {
      b.classList.remove('active-filter');
    });
    btn.classList.add('active-filter');
  });
});


const questionsList = document.querySelector('.questions-list');

    questionsList.addEventListener('dragstart', e => {
      const dragged = e.target;
      dragged.classList.add('dragging');
    });

    questionsList.addEventListener('dragend', e => {
      const dragged = e.target;
      dragged.classList.remove('dragging');

      const orderedIds = [...questionsList.querySelectorAll('.question-item')].map(el => el.dataset.questionId);
      fetch('/admin/question/reorder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ order: orderedIds })
      }).then(res => res.json())
        .then(data => {
          if (!data.success) alert('Failed to update question order.');
        });
    });

    questionsList.addEventListener('dragover', e => {
      e.preventDefault();
      const afterElement = getDragAfterElement(questionsList, e.clientY);
      const dragged = document.querySelector('.dragging');
      if (afterElement == null) {
        questionsList.appendChild(dragged);
      } else {
        questionsList.insertBefore(dragged, afterElement);
      }
    });

    function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll('.question-item:not(.dragging)')];

      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    const companyAdminNameEdit = document.getElementById('companyAdminNameEdit');
    const saveCompanyAdminNameBtn = document.getElementById('saveCompanyAdminName');

    if (saveCompanyAdminNameBtn) {
      saveCompanyAdminNameBtn.addEventListener('click', async () => {
        const newName = companyAdminNameEdit.value.trim();
        const companyId = '<%= company._id %>'; // Get company ID from EJS variable

        if (!newName) {
          alert('Company name cannot be empty.');
          return;
        }

        try {
          const res = await fetch(`/api/companies/${companyId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: newName })
          });
          const data = await res.json();

          if (data.success) {
            alert('Company name updated successfully!');
            // Optionally, update any other displayed company names on the page
            // For example, if there's a header with the company name
            // document.getElementById('someHeaderId').textContent = newName;
          } else {
            alert(data.message || 'Failed to update company name.');
          }
        } catch (error) {
          console.error('Error updating company name:', error);
          alert('An error occurred while updating company name.');
        }
      });
    }
  </script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
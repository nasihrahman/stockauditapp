<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Stock Audit</title>
  <!-- Add Raleway font -->
  <link href="https://fonts.googleapis.com/css?family=Raleway:400,500,600,700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Raleway', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
      background: #f8fafc;
      color: #1e293b;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 24px;
    }
    
    .main-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 32px 24px;
    }
    
    .header {
            background: white;
            color: white;
            padding: 20px;
            position: relative;
            overflow: hidden;
        }
        /* .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="40" r="3" fill="rgba(255,255,255,0.08)"/><circle cx="40" cy="80" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="90" cy="90" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="10" cy="60" r="2" fill="rgba(255,255,255,0.08)"/><circle cx="70" cy="20" r="1" fill="rgba(255,255,255,0.1)"/></svg>');
            animation: float 20s ease-in-out infinite;
        } */

        /* @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        } */
    
    .header-content {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
  gap: 1rem;
background: rgb(23, 40, 50);
  color: white;
  border-radius: 1rem;
}
    .admin-button {
      position: absolute;
      top: 32px;
      right: 32px;
      z-index: 10;
      background: rgba(255,255,255,0.1);
      backdrop-filter: blur(12px);
      border: 2px solid rgba(255,255,255,0.2);
      color: white;
      padding: 12px 20px;
      border-radius: 10px;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 1rem;
      font-weight: 600;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    .admin-button:hover {
      background: rgba(255,255,255,0.2);
      transform: translateY(-2px);
      text-decoration: none;
      color: white;
    }
    
    .admin-icon {
      width: 18px;
      height: 18px;
    }
    .total-score {
      text-align: right;
    }
    
    .total-score h2 {
      font-size: 1.125rem;
      margin-bottom: 8px;
      opacity: 0.9;
      font-weight: 600;
    }
    
    .score-badge {
      background: rgba(255,255,255,0.15);
      backdrop-filter: blur(12px);
      border: 2px solid rgba(255,255,255,0.2);
      color: white;
      font-weight: 700;
      border-radius: 12px;
      padding: 12px 24px;
      font-size: 1.75rem;
      display: inline-block;
      margin-bottom: 4px;
      min-width: 80px;
    }
    
    .score-details {
      font-size: 1rem;
      opacity: 0.85;
      font-weight: 500;
    }
    .admin-button {
        background: rgba(255,255,255,0.2);
        color: white;
        text-decoration: none;
        padding: 12px 24px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.3);
        backdrop-filter: blur(10px);
        margin-bottom: 20px;
    }
    .admin-button:hover {
        background: rgba(255,255,255,0.3);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    .admin-icon {
        width: 20px;
        height: 20px;
    }
    .info-panel {
      background: rgba(255,255,255,0.1);
      backdrop-filter: blur(16px);
      border: 2px solid rgba(255,255,255,0.15);
      border-radius: 16px;
      padding: 24px 32px;
      margin-top: 32px;
      display: flex;
      flex-wrap: wrap;
      gap: 32px;
      align-items: center;
    }
    .info-panel,
.summary-panel {
  flex: 1 1 48%;
  box-sizing: border-box;
}

    .info-item {
      display: flex;
      align-items: center;
      gap: 12px;
      min-width: 200px;
    }
    
    .info-label {
      font-size: 0.95rem;
      opacity: 0.8;
      font-weight: 600;
      color: rgba(255,255,255,0.9);
      white-space: nowrap;
    }
    
    .info-value {
      font-size: 1rem;
      font-weight: 600;
      color: white;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .edit-icon {
      width: 16px;
      height: 16px;
      opacity: 0.7;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .edit-icon:hover {
      opacity: 1;
      transform: scale(1.1);
    }
    
    .category-card {
      background: white;
      border-radius: 16px;
      margin-bottom: 32px;
      overflow: hidden;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      border: 1px solid #e2e8f0;
      transition: all 0.3s ease;
    }
    
    .category-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
    
    .category-header {
      background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
      padding: 24px 32px;
      border-bottom: 2px solid #e2e8f0;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .category-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1e293b;
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .category-score-badge {
      background: #dbeafe;
      color: #1d4ed8;
      font-weight: 700;
      border-radius: 12px;
      padding: 8px 16px;
      font-size: 1.1rem;
      border: 2px solid #bfdbfe;
      min-width: 120px;
      text-align: center;
    }
    
    .questions-list {
      padding: 0;
      list-style: none;
    }
    
    .question-item {
      padding: 32px;
      border-bottom: 1px solid #f1f5f9;
      transition: all 0.2s ease;
    }
    
    .question-item:last-child {
      border-bottom: none;
    }
    
    .question-item:hover {
      background: #fafbfc;
    }
    
    .question-form {
      width: 100%;
    }
    
    .question-content {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 20px;
      gap: 24px;
    }
    
    .question-text {
      font-size: 1.125rem;
      font-weight: 600;
      color: #1e293b;
      flex: 1;
      min-width: 300px;
    }
    
    .question-controls {
      display: flex;
      align-items: center;
      gap: 24px;
      flex-shrink: 0;
    }
    
    .radio-group {
      display: flex;
      gap: 16px;
      align-items: center;
    }
    
    .radio-option {
      display: flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      padding: 10px 16px;
      border-radius: 10px;
      transition: all 0.2s ease;
      border: 2px solid #e2e8f0;
      background: white;
      font-weight: 600;
    }
    
    .radio-option:hover {
      background: #f8fafc;
      border-color: #cbd5e1;
    }
    
    .radio-option.selected-yes {
      background: #ecfdf5;
      border-color: #22c55e;
      color: #166534;
    }
    
    .radio-option.selected-no {
      background: #fef2f2;
      border-color: #ef4444;
      color: #dc2626;
    }
    
    .radio-option input[type="radio"] {
      width: 20px;
      height: 20px;
      cursor: pointer;
    }
    
    .radio-option label {
      font-weight: 600;
      cursor: pointer;
      font-size: 1rem;
    }
    
    .question-score-badge {
      background: #f0f9ff;
      color: #0c4a6e;
      font-weight: 700;
      border-radius: 10px;
      padding: 8px 12px;
      font-size: 1.1rem;
      border: 2px solid #bae6fd;
      min-width: 40px;
      text-align: center;
    }
    
    .add-image-label {
      display: flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      color: #3730a3;
      font-size: 1rem;
      font-weight: 600;
      padding: 10px 16px;
      border: 2px solid #e2e8f0;
      border-radius: 10px;
      background: white;
      transition: all 0.2s ease;
    }
    
    .add-image-label:hover {
      background: #f8fafc;
      border-color: #3730a3;
    }
    
    .comment-input {
      width: 100%;
      padding: 16px 20px;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 1rem;
      background: white;
      transition: all 0.2s ease;
      resize: none;
      font-family: inherit;
      font-weight: 500;
    }
    
    .comment-input:focus {
      outline: none;
      border-color: #3730a3;
      background: white;
      box-shadow: 0 0 0 4px rgba(55, 48, 163, 0.1);
    }
    
    .comment-input::placeholder {
      color: #94a3b8;
      font-weight: 500;
    }
    
    .hidden-file-input {
      display: none;
    }
    
    .no-questions {
      text-align: center;
      padding: 80px 32px;
      color: #64748b;
    }
    
    .no-questions h3 {
      font-size: 1.5rem;
      margin-bottom: 12px;
      color: #475569;
      font-weight: 700;
    }
    
    .no-questions p {
      font-size: 1.125rem;
      margin-bottom: 32px;
      font-weight: 500;
    }
    
    .admin-link {
      display: inline-block;
      background: linear-gradient(135deg, #1e40af 0%, #3730a3 100%);
      color: white;
      padding: 16px 32px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 600;
      font-size: 1.125rem;
      transition: all 0.3s ease;
    }
    
    .admin-link:hover {
      transform: translateY(-2px);
      text-decoration: none;
      color: white;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }
    
    .summary-panel {
      background: #fff;
      border: 1.5px solid #e0e7ef;
      border-radius: 18px;
      padding: 2.5rem 2rem 2rem 2rem;
      margin: 2.5rem auto 2rem auto;
      box-shadow: 0 8px 32px rgba(30,41,59,0.10);
      max-width: 600px;
      text-align: center;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .summary-title {
      color: #3730a3;
      font-weight: 700;
      margin-bottom: 1.5rem;
      font-size: 1.5rem;
      letter-spacing: 0.01em;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .summary-table {
      margin-bottom: 0;
      width: 100%;
      border-radius: 10px;
      overflow: hidden;
      background: #f8fafc;
      box-shadow: 0 2px 8px rgba(30,41,59,0.04);
    }
    .summary-table th {
      background: #e0e7ef;
      color: #3730a3;
      font-weight: 700;
      border: none;
      padding: 1rem 0.75rem;
      font-size: 1.05rem;
    }
    .summary-table td {
      padding: 0.85rem 0.75rem;
      vertical-align: middle;
      border-color: #e0e7ef;
      font-size: 1.05rem;
    }
    .summary-table tr {
      transition: background 0.2s;
    }
    .summary-table tr:hover {
      background: #f1f5f9;
    }
    .badge {
      border-radius: 8px;
      padding: 0.4em 1.1em;
      font-size: 0.98em;
      font-weight: 600;
      background: #e0e7ef;
      color: #3730a3;
      border: 1.5px solid #c7d2fe;
      box-shadow: 0 1px 4px rgba(55,48,163,0.06);
    }
    .badge.bg-success {
      background: #dcfce7;
      color: #166534;
      border-color: #bbf7d0;
    }
    .badge.bg-danger {
      background: #fee2e2;
      color: #b91c1c;
      border-color: #fecaca;
    }
    .badge.bg-secondary {
      background: #e0e7ef;
      color: #3730a3;
      border-color: #c7d2fe;
    }
    .image-preview img {
      max-width: 220px;
      max-height: 220px;
      border-radius: 12px;
      margin-right: 14px;
      margin-bottom: 8px;
      box-shadow: 0 2px 8px rgba(30,41,59,0.10);
      border: 2.5px solid #e0e7ef;
      object-fit: cover;
      transition: transform 0.2s;
      position: relative;
    }
    .remove-image-btn {
      position: absolute;
      top: 8px;
      right: 8px;
      background: #fff;
      color: #dc2626;
      border: 2px solid #fecaca;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      font-size: 1.2rem;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 1px 4px rgba(220,38,38,0.08);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 2;
      transition: background 0.2s, color 0.2s, border 0.2s;
    }
    .remove-image-btn:hover {
      background: #fee2e2;
      color: #b91c1c;
      border-color: #fca5a5;
    }
    @media (max-width: 1024px) {
      .info-panel {
        gap: 24px;
      }
      
      .info-item {
        min-width: 180px;
      }
    }
    
    @media (max-width: 768px) {
     
      
      
      .question-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 20px;
      }
      
      .question-controls {
        width: 100%;
        justify-content: space-between;
      }
      
      .radio-group {
        flex: 1;
      }
      
      .main-container {
        padding: 24px 16px;
      }
      
      .category-header {
        flex-direction: column;
        gap: 16px;
        text-align: center;
        padding: 20px 24px;
      }
      
      .question-item {
        padding: 24px 20px;
      }
    }
    
    @media (max-width: 480px) {
      .question-controls {
        flex-direction: column;
        gap: 16px;
        align-items: stretch;
      }
      
      .radio-group {
        justify-content: space-around;
      }
    }
    /* --- BEGIN: User custom style overrides --- */
    .company-section {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    .logo {
        font-size: 48px;
        filter: drop-shadow(0 4px 8px rgba(0,0,0,0.2));
    }
    .company-info h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 8px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    .company-info p {
        font-size: 1.1rem;
        opacity: 0.9;
        font-weight: 300;
    }
    .total-score {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.25rem;
  background: rgba(255, 255, 255, 0.15);
  padding: 0.75rem 1rem;
  border-radius: 0.75rem;
  text-align: center;
}
    .total-score h2 {
        font-size: 1.2rem;
        margin-bottom: 15px;
        font-weight: 500;
        opacity: 0.9;
    }
    .score-badge {
        font-size: 3rem;
        font-weight: 700;
        display: block;
        text-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    .score-details {
        font-size: 1rem;
        margin-top: 8px;
        opacity: 0.8;
    }
    .admin-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  text-decoration: none;
  color: white;
  background: rgba(255, 255, 255, 0.15);
  padding: 0.5rem 0.75rem;
  border-radius: 0.75rem;
  transition: background 0.3s;
}
    .admin-button:hover {
  background: rgba(255, 255, 255, 0.25);
}
    .admin-icon {
        width: 20px;
        height: 20px;
    }
    .info-panel {
        background: rgba(255,255,255,0.95);
        border-radius: 16px;
        padding: 24px;
        position: relative;
        padding-top: 40px;
        margin-top: 20px;
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255,255,255,0.3);
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        max-width: 48%;
    }

    .info-header {
    position: absolute;
    top: 16px;
    right: 20px;
  }
  #edit-all-btn {
    background-color: #4f46e5;
    color: white;
    border: none;
    padding: 6px 14px;
    border-radius: 8px;
    font-size: 14px;
    cursor: pointer;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
    transition: background-color 0.3s ease;
  }
  #edit-all-btn:hover {
    background-color: #4338ca;
  }
    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }
    .info-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 0;
        border-bottom: 1px solid rgba(102, 126, 234, 0.1);
    }
    .info-item:last-child {
        border-bottom: none;
    }
    .info-icon {
        width: 20px;
        height: 20px;
        color: #667eea;
        flex-shrink: 0;
    }
    .info-content {
        flex: 1;
    }
    .info-label {
        font-size: 0.9rem;
        color: #64748b;
        font-weight: 500;
        margin-bottom: 4px;
    }
    .info-value {
        font-size: 1rem;
        color: #1e293b;
        font-weight: 600;
        padding: 4px 8px;
        border-radius: 6px;
        transition: all 0.3s ease;
        min-height: 32px;
        display: flex;
        align-items: center;
    }
    .info-value[contenteditable="true"] {
        background: #f8fafc;
        border: 2px solid #667eea;
        outline: none;
    }
    .edit-icon {
        width: 16px;
        height: 16px;
        color: #94a3b8;
        cursor: pointer;
        transition: color 0.3s ease;
        flex-shrink: 0;
    }
    .edit-icon:hover {
        color: #667eea;
    }
    .summary-panel {
        background: white;
        margin: 30px auto;
        max-width: 48%;
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }
    .summary-title {
        color: #1e293b;
        margin-bottom: 20px;
        font-size: 1.3rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    .summary-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 16px;
    }
    .summary-table th {
        background: #f8fafc;
        color: #475569;
        font-weight: 600;
        padding: 16px;
        text-align: left;
        border-bottom: 2px solid #e2e8f0;
    }
    .summary-table td {
        padding: 16px;
        border-bottom: 1px solid #e2e8f0;
        color: #334155;
    }
    .summary-table tr:hover {
        background: #f8fafc;
    }
    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
    }
    .status-pending {
        background: #fef3c7;
        color: #92400e;
    }
    .status-warning {
        background: #fecaca;
        color: #991b1b;
    }
    .status-success {
        background: #d1fae5;
        color: #065f46;
    }

    .panels-container {
  display: flex;
  flex-wrap: wrap;
  gap: 24px;
  justify-content: space-between;
  align-items: flex-start;
  margin: 2rem auto;
  max-width: 1400px;
  padding: 0 1rem;
}
@media (max-width: 768px) {
  .total-score {
    flex-direction: row;
    justify-content: space-around;
    width: 100%;
  }

  .admin-label {
    display: none;
  }

  .header-content {
    flex-direction: column;
    align-items: flex-start;
  }

  .admin-button {
    align-self: flex-end;
  }

  .info-panel,
  .summary-panel {
    max-width: 100%;
    flex: 1 1 100%;
  }

  .panels-container {
    flex-direction: column;
  }
}

    /* --- END: User custom style overrides --- */
    .image-modal {
      display: none;
      position: fixed;
      z-index: 10000;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(30,41,59,0.85);
      align-items: center;
      justify-content: center;
      transition: opacity 0.2s;
    }
    .image-modal.active {
      display: flex;
    }
    .image-modal-content {
      max-width: 90vw;
      max-height: 90vh;
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.25);
      background: #fff;
      padding: 16px;
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .image-modal-img {
      max-width: 80vw;
      max-height: 70vh;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(30,41,59,0.15);
      object-fit: contain;
      background: #fff;
    }
    .image-modal-close {
      position: absolute;
      top: 8px;
      right: 16px;
      background: #ef4444;
      color: #fff;
      border: none;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      font-size: 1.5rem;
      font-weight: bold;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
      transition: background 0.2s;
    }
    .image-modal-close:hover {
      background: #dc2626;
    }
  </style>
  
</head>
<body>
  
  <header class="header">
    <div class="header-content">
      <div class="company-section">
        <div class="logo">🏢</div>
        <div class="company-info">
          <h1>Aurora Company</h1>
          <p>Stock Auditing System</p>
        </div>
      </div>
      
      
        
        <div class="total-score">
          <h2>Total Score</h2>
          <span class="score-badge" id="totalScore">0</span>
          <div class="score-details" id="totalScoreDetails">0 / 0 (0%)</div>
        </div>
      </div>
     
        <a href="/admin" class="admin-button">
  <svg class="admin-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4z"/>
    <path d="M4 20v-1c0-2.21 3.58-4 8-4s8 1.79 8 4v1"/>
  </svg>
  <span class="admin-label">Admin</span>
</a>

      
      
      
    </div>
  </header>
  <div class="panels-container">
    
      
  <div class="info-panel">

      <div class="info-header">
  <button id="edit-all-btn">Edit Info</button>
</div>

        <div class="info-item">
          <div class="info-label">Location:</div>
          <div class="info-value">
            AURFS001 - Aurora - Marassi Galleria Mall
            <svg class="edit-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
            </svg>
          </div>
        </div>
        <div class="info-item">
          <div class="info-label">Date:</div>
          <div class="info-value">2025-06-10</div>
        </div>
        <div class="info-item">
          <div class="info-label">Branch:</div>
          <div class="info-value">Aurora - Marassi Galleria Mall</div>
        </div>
        <div class="info-item">
          <div class="info-label">Manager On Duty:</div>
          <div class="info-value">Chef Shubash Khotiyal</div>
        </div>
        <div class="info-item">
          <div class="info-label">G.W.R Inspector:</div>
          <div class="info-value">Mira Fattouh</div>
        </div>
        
      </div>
      

  
 <div class="summary-panel">
      <h4 class="summary-title">
        <i class="fas fa-chart-bar me-2"></i>
        Quick Summary
      </h4>
      <div class="table-responsive">
        <table class="table table-hover summary-table" id="summaryTable">
          <thead>
            <tr>
              <th>Category</th>
              <th>Score</th>
              <th>Percentage</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody id="summaryTableBody">
            <!-- Dynamic rows will be inserted here -->
          </tbody>
        </table>
      </div>
    </div>
</div>
  <div class="main-container">
    <main>
      <% if (categories && categories.length) { %>
        <% categories.forEach(function(cat) { %>
          <div class="category-card" data-category-id="<%= cat._id %>">
            <div class="category-header">
              <div class="category-title">
                <%= cat.name %>
                <span class="category-score-badge category-score" data-category-id="<%= cat._id %>">0/0 (0%)</span>
              </div>
            </div>
            <ul class="questions-list">
              <% questions.filter(q => q.category && q.category._id.toString() === cat._id.toString()).forEach(function(q, idx) { %>
                <li class="question-item" data-category-id="<%= cat._id %>" data-question-id="<%= q._id %>">
                  <form method="POST" action="/audit/answer/<%= q._id %>" enctype="multipart/form-data" class="question-form">
                    <div class="question-content">
                      <div class="question-text"><%= idx + 1 %>. <%= q.text %></div>
                      <div class="question-controls">
                        <div class="radio-group">
                          <div class="radio-option">
                            <input type="radio" name="response-<%= q._id %>" value="yes" id="<%= q._id %>-yes" data-score="1">
                            <label for="<%= q._id %>-yes">Yes</label>
                          </div>
                          <div class="radio-option">
                            <input type="radio" name="response-<%= q._id %>" value="no" id="<%= q._id %>-no" data-score="0">
                            <label for="<%= q._id %>-no">No</label>
                          </div>
                          <div class="radio-option">
                            <input type="radio" name="response-<%= q._id %>" value="na" id="<%= q._id %>-na" data-score="0">
                            <label for="<%= q._id %>-na">N/A</label>
                          </div>
                        </div>
                        <span class="question-score-badge" data-question-id="<%= q._id %>">0</span>
                        <label class="add-image-label">
                          📷 Add image
                          <input type="file" name="images" class="hidden-file-input" accept="image/*">
                        </label>
                      </div>
                    </div>
                    <input type="text" class="comment-input" placeholder="Add your comments here..." name="comment" autocomplete="off">
                    <div class="image-preview" data-question-id="<%= q._id %>"></div>
                  </form>
                </li>
              <% }) %>
            </ul>
          </div>
        <% }) %>
      <% } else { %>
        <div class="no-questions">
          <h3>No audit questions available</h3>
          <p>Please add categories and questions to get started.</p>
          <a href="/admin" class="admin-link">Go to Admin Panel</a>
        </div>
      <% } %>
    </main>
  </div>

  <div id="imageModal" class="image-modal">
    <div class="image-modal-content">
      <button class="image-modal-close" id="closeModalBtn">&times;</button>

      <img src="" alt="Preview" class="image-modal-img" id="imageModalImg">
    </div>
  </div>

  <script>
    let isPrefilling = false;
    // --- AJAX: Fetch and prefill answers on load ---
    function fetchAndPrefillAnswers() {
      isPrefilling = true; // ⛳️ Start prefilling
      fetch('/api/answers')
        .then(res => res.json())
        .then(data => {
          if (data.answers) {
            data.answers.forEach(ans => {
              // Set radio
              if (ans.response) {
                const radio = document.querySelector(`input[type="radio"][name='response-${ans.question}'][value='${ans.response}']`);
                if (radio) {
                  radio.checked = true;
                  // Trigger change event to update score UI
                  radio.dispatchEvent(new Event('change', { bubbles: true }));
                }
              }
              // Set comment
              const comment = document.querySelector(`.question-item[data-question-id='${ans.question}'] .comment-input`);
              if (comment && typeof ans.comment === 'string') comment.value = ans.comment;
              // Set image preview(s)
              if (ans.images && ans.images.length) {
                renderImagePreview(ans.question, ans.images);
              }
            });
            updateScores();
          }
        })
        .finally(() => {
          isPrefilling = false; // ✅ Done prefilling
        });
    }

    // --- AJAX: Save answer ---
    function saveAnswer(questionId, data, isImage) {
      let fetchOptions = {
        method: 'POST',
        body: undefined
      };
      if (isImage) {
        const formData = new FormData();
        Object.keys(data).forEach(k => formData.append(k, data[k]));
        fetchOptions.body = formData;
      } else {
        fetchOptions.headers = { 'Content-Type': 'application/json' };
        fetchOptions.body = JSON.stringify(data);
      }
      fetch('/api/answer', fetchOptions)
        .then(res => res.json())
        .then(resp => {
          if (resp.success && resp.answer && resp.answer.images && isImage) {
            renderImagePreview(questionId, resp.answer.images);
          }
        })
        .catch(() => {
          alert('Failed to save answer. Please try again.');
        });
    }

    // --- Scoring logic: update per-question, per-category, and total scores ---
    function updateScores() {
      // Per-question score badge
      document.querySelectorAll('.question-item').forEach(function(item) {
        const radios = item.querySelectorAll('input[type="radio"]');
        let score = 0;
        radios.forEach(r => {
          if (r.checked && r.value === 'yes') score = 1;
        });
        const badge = item.querySelector('.question-score-badge');
        if (badge) badge.textContent = score;
      });

      // Per-category and total
      let totalScore = 0, totalPossible = 0;
      document.querySelectorAll('.category-card').forEach(function(catCard) {
        const catId = catCard.getAttribute('data-category-id');
        const questions = catCard.querySelectorAll('.question-item');
        let catScore = 0, catPossible = 0;
        questions.forEach(function(item) {
          const radios = item.querySelectorAll('input[type="radio"]');
          let answered = false;
          radios.forEach(r => {
            if (r.checked) {
              answered = true;
              if (r.value === 'yes') catScore += 1;
            }
          });
          // Only count as possible if not N/A
          if (answered && radios[2] && !radios[2].checked) catPossible += 1;
          // If N/A is selected, do not count as possible
          if (answered && radios[2] && radios[2].checked) {
            // N/A selected, do not increment possible
          } else if (answered) {
            // Yes/No selected, increment possible
            // Already handled above
          }
        });
        totalScore += catScore;
        totalPossible += catPossible;
        // Update category badge
        const catBadge = catCard.querySelector('.category-score-badge');
        if (catBadge) {
          catBadge.textContent = `${catScore}/${catPossible} (${catPossible ? Math.round(catScore/catPossible*100) : 0}%)`;
        }
      });
      // Update total
      document.getElementById('totalScore').textContent = totalScore;
      document.getElementById('totalScoreDetails').textContent = `${totalScore} / ${totalPossible} (${totalPossible ? Math.round(totalScore/totalPossible*100) : 0}%)`;
      // Update summary panel
      updateSummaryPanel();
    }

    // --- DYNAMIC SUMMARY PANEL ---
    function updateSummaryPanel() {
      const tbody = document.getElementById('summaryTableBody');
      tbody.innerHTML = '';
      document.querySelectorAll('.category-card').forEach(function(catCard) {
        const catName = catCard.querySelector('.category-title').childNodes[0].textContent.trim();
        const catBadge = catCard.querySelector('.category-score-badge');
        let score = catBadge ? catBadge.textContent : '0/0 (0%)';
        let [scored, possible] = score.split('/');
        possible = possible.split(' ')[0];
        let percent = score.match(/\((\d+)%\)/);
        percent = percent ? percent[1] : '0';
        let status = 'Pending', badgeClass = 'badge bg-secondary';
        if (possible > 0) {
          if (percent >= 80) { status = 'Pass'; badgeClass = 'badge bg-success'; }
          else if (percent >= 50) { status = 'Warning'; badgeClass = 'badge bg-secondary'; }
          else { status = 'Fail'; badgeClass = 'badge bg-danger'; }
        }
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td class="fw-semibold">${catName}</td>
          <td>${scored}/${possible}</td>
          <td>${percent}%</td>
          <td><span class="${badgeClass}">${status}</span></td>
        `;
        tbody.appendChild(tr);
      });
    }
    
    // --- Listen for radio changes ---
    document.querySelectorAll('input[type="radio"]').forEach(function(radio) {
      radio.addEventListener('change', function() {
        if (isPrefilling) return;
        updateScores();
        const questionItem = this.closest('.question-item');
        const questionId = questionItem.getAttribute('data-question-id');
        const response = this.value;
        const comment = questionItem.querySelector('.comment-input').value;
        saveAnswer(questionId, { questionId, response, comment });
      });
    });

    // --- Listen for comment changes (debounced) ---
    document.querySelectorAll('.comment-input').forEach(function(input) {
      let timeout;
      input.addEventListener('input', function () {
        clearTimeout(timeout);
        const questionItem = this.closest('.question-item');
        const questionId = questionItem.getAttribute('data-question-id');
        const radios = questionItem.querySelectorAll('input[type="radio"]');
        let response = '';
        radios.forEach(r => { if (r.checked) response = r.value; });
        const comment = this.value;
        // 🚫 Prevent overwriting comment with empty string unless explicitly cleared
        if (isPrefilling) return;
        if (comment.trim() === '') return;
        timeout = setTimeout(() => {
          saveAnswer(questionId, { questionId, response: response || undefined, comment });
        }, 500);
      });
      // Replace Add Comment button with Clear Comment button
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.textContent = 'Clear Comment';
      btn.className = 'clear-comment-btn';
      btn.style.marginLeft = '8px';
      input.parentNode.insertBefore(btn, input.nextSibling);
      btn.addEventListener('click', function() {
        if (isPrefilling) return;
        input.value = '';
        const questionItem = input.closest('.question-item');
        const questionId = questionItem.getAttribute('data-question-id');
        const radios = questionItem.querySelectorAll('input[type="radio"]');
        let response = '';
        radios.forEach(r => { if (r.checked) response = r.value; });
        // Explicitly clear comment in backend
        saveAnswer(questionId, { questionId, response: response || undefined, comment: '' });
      });
    });

    // --- Listen for image uploads ---
    document.querySelectorAll('input[type="file"]').forEach(function(input) {
      input.addEventListener('change', function() {
        const questionItem = this.closest('.question-item');
        const questionId = questionItem.getAttribute('data-question-id');
        const radios = questionItem.querySelectorAll('input[type="radio"]');
        let response = '';
        radios.forEach(r => { if (r.checked) response = r.value; });
        const comment = questionItem.querySelector('.comment-input').value;
        if (this.files && this.files.length) {
          const formData = new FormData();
          formData.append('questionId', questionId);
          formData.append('response', response);
          formData.append('comment', comment);
          formData.append('images', this.files[0]);
          fetch('/api/answer', {
            method: 'POST',
            body: formData
          })
            .then(res => res.json())
            .then(resp => {
              if (resp.success && resp.answer && resp.answer.images) {
                renderImagePreview(questionId, resp.answer.images);
              }
            })
            .catch(() => {
              alert('Failed to upload image.');
            });
        }
      });
    });

    // --- IMAGE PREVIEW + REMOVE BUTTON ---
    function renderImagePreview(questionId, images) {
      const preview = document.querySelector(`.question-item[data-question-id='${questionId}'] .image-preview`);
      if (preview) {
        preview.innerHTML = '';
        images.forEach((img, idx) => {
          const wrapper = document.createElement('div');
          wrapper.style.display = 'inline-block';
          wrapper.style.position = 'relative';
          wrapper.style.marginRight = '14px';
          wrapper.style.marginBottom = '8px';
          const imageEl = document.createElement('img');
          imageEl.src = img;
          imageEl.alt = 'Preview';
          imageEl.style.maxWidth = '220px';
          imageEl.style.maxHeight = '220px';
          imageEl.style.borderRadius = '12px';
          imageEl.style.boxShadow = '0 2px 8px rgba(30,41,59,0.10)';
          imageEl.style.border = '2.5px solid #e0e7ef';
          imageEl.style.objectFit = 'cover';
          imageEl.style.display = 'block';
          imageEl.style.position = 'relative';
          // --- Modal open on click ---
          imageEl.style.cursor = 'pointer';
          imageEl.addEventListener('click', function(e) {
            e.preventDefault();
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('imageModalImg');

            modalImg.src = img;
            modal.classList.add('active');
          });
          // ...existing code for removeBtn...
          const removeBtn = document.createElement('button');
          removeBtn.type = 'button';
          removeBtn.className = 'remove-image-btn';
          removeBtn.innerHTML = '&times;';
          removeBtn.title = 'Remove image';
          removeBtn.addEventListener('click', function(e) {
            e.preventDefault();
            fetch(`/api/answer/image-remove`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ questionId, image: img })
            })
              .then(res => res.json())
              .then(resp => {
                if (resp.success && resp.answer && resp.answer.images) {
                  renderImagePreview(questionId, resp.answer.images);
                }
              });
          });
          wrapper.appendChild(imageEl);
          wrapper.appendChild(removeBtn);
          preview.appendChild(wrapper);
        });
      }
    }
    // --- Modal close logic ---
    document.addEventListener('DOMContentLoaded', function () {
      fetchAndPrefillAnswers();
    const editBtn = document.getElementById('edit-all-btn');
    const infoValues = document.querySelectorAll('.info-panel .info-value');
    let isEditing = false;

    editBtn.addEventListener('click', function () {
      isEditing = !isEditing;

      infoValues.forEach(valueDiv => {
        if (isEditing) {
          valueDiv.setAttribute('contenteditable', 'true');
          valueDiv.style.background = '#fff';
          valueDiv.style.borderBottom = '2px solid #3730a3';
          valueDiv.style.color = '#3730a3';
        } else {
          valueDiv.removeAttribute('contenteditable');
          valueDiv.style.background = '';
          valueDiv.style.borderBottom = '';
          valueDiv.style.color = '';
        }
      });

      editBtn.innerText = isEditing ? 'Save Info' : 'Edit Info';

      // Optionally, on save, you could collect and send the edited values via fetch() here.
    });
      const modal = document.getElementById('imageModal');
      const closeModalBtn = document.getElementById('closeModalBtn');
      closeModalBtn.addEventListener('click', function() {
        modal.classList.remove('active');
        document.getElementById('modalImage').src = '';
      });
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          modal.classList.remove('active');
          document.getElementById('modalImage').src = '';
        }
      });
    });

    // --- INFO PANEL EDITABLE WITH EDIT ICON ---
    document.querySelectorAll('.info-item').forEach(function(item) {
      const valueDiv = item.querySelector('.info-value');
      const editIcon = item.querySelector('.edit-icon');
      if (editIcon && valueDiv) {
        editIcon.style.cursor = 'pointer';
        editIcon.addEventListener('click', function(e) {
          e.preventDefault();
          valueDiv.setAttribute('contenteditable', 'true');
          valueDiv.focus();
          valueDiv.style.background = '#fff';
          valueDiv.style.color = '#3730a3';
          valueDiv.style.borderBottom = '2px solid #3730a3';
        });
        valueDiv.addEventListener('blur', function() {
          valueDiv.removeAttribute('contenteditable');
          valueDiv.style.background = '';
          valueDiv.style.color = '';
          valueDiv.style.borderBottom = '';
        });
      }
    });

    // Modal close logic
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('imageModalImg');
    const modalClose = document.getElementById('imageModalClose');
    modalClose.addEventListener('click', function() {
      modal.classList.remove('active');
      setTimeout(() => { modal.style.display = 'none'; modalImg.src = ''; }, 200);
    });
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        modal.classList.remove('active');
        setTimeout(() => { modal.style.display = 'none'; modalImg.src = ''; }, 200);
      }
    });
  </script>

  <!-- Image Modal Overlay -->
  <div id="imageModal" style="display:none;position:fixed;z-index:9999;top:0;left:0;width:100vw;height:100vh;background:rgba(30,41,59,0.85);align-items:center;justify-content:center;">
    <span id="closeModalBtn" style="position:absolute;top:32px;right:48px;font-size:2.5rem;color:#fff;cursor:pointer;z-index:10001;font-weight:700;">&times;</span>
    <img id="modalImage" src="" alt="Preview" style="max-width:90vw;max-height:80vh;border-radius:18px;box-shadow:0 8px 32px rgba(0,0,0,0.25);border:4px solid #fff;">
  </div>
  <style>
    #imageModal { display: none; position: fixed; z-index: 9999; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(30,41,59,0.85); align-items: center; justify-content: center; }
    #imageModal.active { display: flex !important; }
    #imageModal img { max-width: 90vw; max-height: 80vh; border-radius: 18px; box-shadow: 0 8px 32px rgba(0,0,0,0.25); border: 4px solid #fff; }
    #closeModalBtn { position: absolute; top: 32px; right: 48px; font-size: 2.5rem; color: #fff; cursor: pointer; z-index: 10001; font-weight: 700; transition: color 0.2s; }
    #closeModalBtn:hover { color: #f87171; }
  </style>
  <script>
    // --- IMAGE PREVIEW + REMOVE BUTTON ---
    function renderImagePreview(questionId, images) {
      const preview = document.querySelector(`.question-item[data-question-id='${questionId}'] .image-preview`);
      if (preview) {
        preview.innerHTML = '';
        images.forEach((img, idx) => {
          const wrapper = document.createElement('div');
          wrapper.style.display = 'inline-block';
          wrapper.style.position = 'relative';
          wrapper.style.marginRight = '14px';
          wrapper.style.marginBottom = '8px';
          const imageEl = document.createElement('img');
          imageEl.src = img;
          imageEl.alt = 'Preview';
          imageEl.style.maxWidth = '220px';
          imageEl.style.maxHeight = '220px';
          imageEl.style.borderRadius = '12px';
          imageEl.style.boxShadow = '0 2px 8px rgba(30,41,59,0.10)';
          imageEl.style.border = '2.5px solid #e0e7ef';
          imageEl.style.objectFit = 'cover';
          imageEl.style.display = 'block';
          imageEl.style.position = 'relative';
          // --- Modal open on click ---
          imageEl.style.cursor = 'pointer';
          imageEl.addEventListener('click', function(e) {
            e.preventDefault();
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            modalImg.src = img;
            modal.classList.add('active');
          });
          const removeBtn = document.createElement('button');
          removeBtn.type = 'button';
          removeBtn.className = 'remove-image-btn';
          removeBtn.innerHTML = '&times;';
          removeBtn.title = 'Remove image';
          removeBtn.addEventListener('click', function(e) {
            e.preventDefault();
            fetch(`/api/answer/image-remove`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ questionId, image: img })
            })
              .then(res => res.json())
              .then(resp => {
                if (resp.success && resp.answer && resp.answer.images) {
                  renderImagePreview(questionId, resp.answer.images);
                }
              });
          });
          wrapper.appendChild(imageEl);
          wrapper.appendChild(removeBtn);
          preview.appendChild(wrapper);
        });
      }
    }
    // --- Modal close logic ---
    document.addEventListener('DOMContentLoaded', function () {
      fetchAndPrefillAnswers();
    const editBtn = document.getElementById('edit-all-btn');
    const infoValues = document.querySelectorAll('.info-panel .info-value');
    let isEditing = false;

    editBtn.addEventListener('click', function () {
      isEditing = !isEditing;

      infoValues.forEach(valueDiv => {
        if (isEditing) {
          valueDiv.setAttribute('contenteditable', 'true');
          valueDiv.style.background = '#fff';
          valueDiv.style.borderBottom = '2px solid #3730a3';
          valueDiv.style.color = '#3730a3';
        } else {
          valueDiv.removeAttribute('contenteditable');
          valueDiv.style.background = '';
          valueDiv.style.borderBottom = '';
          valueDiv.style.color = '';
        }
      });

      editBtn.innerText = isEditing ? 'Save Info' : 'Edit Info';

      // Optionally, on save, you could collect and send the edited values via fetch() here.
    });
      const modal = document.getElementById('imageModal');
      const closeModalBtn = document.getElementById('closeModalBtn');
      closeModalBtn.addEventListener('click', function() {
        modal.classList.remove('active');
        document.getElementById('modalImage').src = '';
      });
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          modal.classList.remove('active');
          document.getElementById('modalImage').src = '';
        }
      });
    });

    // --- INFO PANEL EDITABLE WITH EDIT ICON ---
    document.querySelectorAll('.info-item').forEach(function(item) {
      const valueDiv = item.querySelector('.info-value');
      const editIcon = item.querySelector('.edit-icon');
      if (editIcon && valueDiv) {
        editIcon.style.cursor = 'pointer';
        editIcon.addEventListener('click', function(e) {
          e.preventDefault();
          valueDiv.setAttribute('contenteditable', 'true');
          valueDiv.focus();
          valueDiv.style.background = '#fff';
          valueDiv.style.color = '#3730a3';
          valueDiv.style.borderBottom = '2px solid #3730a3';
        });
        valueDiv.addEventListener('blur', function() {
          valueDiv.removeAttribute('contenteditable');
          valueDiv.style.background = '';
          valueDiv.style.color = '';
          valueDiv.style.borderBottom = '';
        });
      }
    });

    // Modal close logic
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('imageModalImg');
    const modalClose = document.getElementById('imageModalClose');
    modalClose.addEventListener('click', function() {
      modal.classList.remove('active');
      setTimeout(() => { modal.style.display = 'none'; modalImg.src = ''; }, 200);
    });
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        modal.classList.remove('active');
        setTimeout(() => { modal.style.display = 'none'; modalImg.src = ''; }, 200);
      }
    });
  </script>
</body>
</html>

